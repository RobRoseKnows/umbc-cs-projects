install.packages("stringi")
install.packages("stringi")
require(ISLR)
require(islr)
install.packages("ISLR")
require(ISLR)
Weekly
c
plot(Weekly)
summary(Weekly)
require(ISLR)
plot(Weekly)
summary(Weekly)
glm(Weekly.Direction ~ Weekly.,data=Weekly, family=binomial)
glm(Weekly$Direction ~ Weekly.,data=Weekly, family=binomial)
require(ISLR)
plot(Weekly)
summary(Weekly)
glm(Weekly$Direction ~ Weekly.,data=Weekly, family=binomial)
glm(Direction ~ Weekly.,data=Weekly, family=binomial)
glm(Direction ~ Weekly.,data=Weekly, family=binomial)
glm(Direction ~ .,data=Weekly, family=binomial)
summary(glm.fit)
glm(c(Direction) ~ .,data=Weekly, family=binomial)
summary(glm.fit)
glm(Direction ~ .,data=Weekly, family=binomial)
summary(glm.fit)
glm(income + balance ~ default, data=Default, family=binomial)
require(ISLR)
require(MASS)
require(boot)
glm(income + balance ~ default, data=Default, family=binomial)
glm(default ~ income + balance, data=Default, family=binomial)
summary(glm.fit)
set.seed(1)
train = sample(10000,5000)
glm.fit=glm(default ~ income + balance, data=Default, family=binomial, subset=train)
test = Default[-train,]
train.data = Default[train,]
test.data = Default[-train,]
glm.fit=glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.probs=predict(glm.fit, newdata=test, type=response)
glm.probs=predict(glm.fit, newdata=test, type='response')
mean(glm.probs)
glm.pred=ifelse(glm.probs>.45, "Yes", "No")
table(glm.predm test.data$default)
table(glm.pred, test.data$default)
train = sample(10000,8000)
train = sample(10000,5000)
glm.fit = glm(default~income+balance, data=Default, family=binomial)
cv.glm(Default, glm.fit,K=5)$delta[1]
cv.glm(Default, glm.fit,K=2)$delta[1]
